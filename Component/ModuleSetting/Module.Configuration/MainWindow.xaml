<Window
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:ribbon="http://schemas.microsoft.com/winfx/2006/xaml/presentation/ribbon"
                     xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
       xmlns:d="clr-namespace:Module.Configuration"
        xmlns:c="clr-namespace:Module.Configuration.Control"
                     xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" xmlns:Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit" x:Class="Module.Configuration.MainWindow"
                     Title="画面组态工具"
                     Width="525"
                     Height="350">
    <Window.Resources>
        <ControlTemplate x:Key="PropertyGridControlTemplate1" TargetType="{x:Type xctk:PropertyGrid}">
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                <Grid Margin="{TemplateBinding Padding}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                        <RowDefinition Height="5"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <Border BorderBrush="Black" BorderThickness="1" Background="White" Height="44" Margin="6,4,0,4" Padding="2" Width="44">
                            <Border.Visibility>
                                <Binding Path="ShowPreview" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </Border.Visibility>
                            <Rectangle>
                                <Rectangle.Fill>
                                    <VisualBrush Stretch="Uniform">
                                        <VisualBrush.Visual>
                                            <Binding Path="SelectedObject" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <xctk:ObjectToUIElementConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Border>
                        <StackPanel Margin="6,2,0,4" Orientation="Horizontal" VerticalAlignment="Center">
                            <StackPanel.Visibility>
                                <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </StackPanel.Visibility>
                            <TextBlock FontWeight="Bold" Text="{TemplateBinding SelectedObjectTypeName}"/>
                            <TextBlock Margin="5,0,0,0" Text="{TemplateBinding SelectedObjectName}"/>
                        </StackPanel>
                    </StackPanel>
                    <Grid x:Name="toolsContainer" Margin="4,0,4,4" Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="sortButtonContainer" Margin="4">
                            <Grid.Visibility>
                                <Binding Path="ShowSortOptions" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </Grid.Visibility>
                            <StackPanel Margin="1" Orientation="Horizontal">
                                <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="Categorized" VerticalAlignment="Center">
                                    <RadioButton.Style>
                                        <Style TargetType="{x:Type RadioButton}">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="BorderThickness" Value="1"/>
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                            <Setter Property="Height" Value="22"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                                            <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                                            <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RadioButton}">
                                                        <Grid SnapsToDevicePixels="True">
                                                            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0"/>
                                                            <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0">
                                                                <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                                                    <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                                                        <ContentPresenter x:Name="Content" RenderOptions.BitmapScalingMode="NearestNeighbor" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="Center"/>
                                                                    </StackPanel>
                                                                </Border>
                                                            </Border>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" TargetName="Content" Value="0.5"/>
                                                                <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E"/>
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RadioButton.Style>
                                    <Image Height="16" Width="16">
                                        <Image.Source>
                                            <BitmapImage UriSource="pack://application:,,,/Xceed.Wpf.Toolkit;component/PropertyGrid/Images/Categorize16.png"/>
                                        </Image.Source>
                                    </Image>
                                </RadioButton>
                                <RadioButton ToolTip="Alphabetical" VerticalAlignment="Center">
                                    <RadioButton.IsChecked>
                                        <Binding Mode="OneWay" Path="IsCategorized" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </RadioButton.IsChecked>
                                    <RadioButton.Style>
                                        <Style TargetType="{x:Type RadioButton}">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="BorderThickness" Value="1"/>
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                            <Setter Property="Height" Value="22"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                                            <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                                            <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RadioButton}">
                                                        <Grid SnapsToDevicePixels="True">
                                                            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0"/>
                                                            <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0">
                                                                <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                                                    <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                                                        <ContentPresenter x:Name="Content" RenderOptions.BitmapScalingMode="NearestNeighbor" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="Center"/>
                                                                    </StackPanel>
                                                                </Border>
                                                            </Border>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" TargetName="Content" Value="0.5"/>
                                                                <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E"/>
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RadioButton.Style>
                                    <Image Height="16" Width="16">
                                        <Image.Source>
                                            <BitmapImage UriSource="pack://application:,,,/Xceed.Wpf.Toolkit;component/PropertyGrid/Images/SortAscending16.png"/>
                                        </Image.Source>
                                    </Image>
                                </RadioButton>
                            </StackPanel>
                        </Grid>
                        <Border x:Name="searchBoxContainer" BorderBrush="Gray" BorderThickness="1" Background="White" Grid.Column="1" Margin="4,4,0,4">
                            <Border.Visibility>
                                <Binding Path="ShowSearchBox" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </Border.Visibility>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <xctk:WatermarkTextBox x:Name="_txtFilter" Background="Transparent" Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Watermark="{TemplateBinding FilterWatermark}">
                                    <xctk:WatermarkTextBox.Style>
                                        <Style TargetType="{x:Type Control}">
                                            <Setter Property="BorderThickness" Value="0"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </xctk:WatermarkTextBox.Style>
                                </xctk:WatermarkTextBox>
                                <Button Grid.Column="1" HorizontalAlignment="Left">
                                    <Button.Command>
                                        <RoutedCommand/>
                                    </Button.Command>
                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="BorderThickness" Value="1"/>
                                            <Setter Property="Height" Value="22"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                                            <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                                            <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Grid SnapsToDevicePixels="True">
                                                            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0"/>
                                                            <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0">
                                                                <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                                                    <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                                                        <ContentPresenter x:Name="Content" RenderOptions.BitmapScalingMode="NearestNeighbor" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="Center"/>
                                                                    </StackPanel>
                                                                </Border>
                                                            </Border>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" TargetName="Content" Value="0.5"/>
                                                                <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                                <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonPressedOuterBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Button.Style>
                                    <Image Height="16" Width="16">
                                        <Image.Source>
                                            <BitmapImage UriSource="pack://application:,,,/Xceed.Wpf.Toolkit;component/PropertyGrid/Images/ClearFilter16.png"/>
                                        </Image.Source>
                                    </Image>
                                </Button>
                            </Grid>
                        </Border>
                    </Grid>
                    <Grid Background="White" Grid.Row="2">
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <xctk:PropertyItemsControl x:Name="PART_PropertyItemsControl" Background="#FFF0F0F0" Focusable="False" IsTabStop="False" ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top">
                                <xctk:PropertyItemsControl.GroupStyle>
                                    <GroupStyle Panel="{x:Null}">
                                        <GroupStyle.ContainerStyle>
                                            <Style TargetType="{x:Type GroupItem}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Border>
                                                                <Expander Header="{Binding Name}" IsExpanded="True">
                                                                    <Expander.Style>
                                                                        <Style TargetType="{x:Type Expander}">
                                                                            <Setter Property="Padding" Value="0"/>
                                                                            <Setter Property="Background" Value="#FFF0F0F0"/>
                                                                            <Setter Property="Template">
                                                                                <Setter.Value>
                                                                                    <ControlTemplate TargetType="{x:Type Expander}">
                                                                                        <Grid>
                                                                                            <Grid.RowDefinitions>
                                                                                                <RowDefinition Height="Auto"/>
                                                                                                <RowDefinition x:Name="ContentRow" Height="*"/>
                                                                                            </Grid.RowDefinitions>
                                                                                            <Border x:Name="Border" BorderBrush="#FFF0F0F0" Background="{TemplateBinding Background}">
                                                                                                <Grid>
                                                                                                    <Grid.ColumnDefinitions>
                                                                                                        <ColumnDefinition Width="20"/>
                                                                                                        <ColumnDefinition Width="*"/>
                                                                                                    </Grid.ColumnDefinitions>
                                                                                                    <ToggleButton IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True">
                                                                                                        <ToggleButton.Template>
                                                                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                                                <Grid>
                                                                                                                    <Rectangle x:Name="Rectangle" Fill="Transparent" Margin="0"/>
                                                                                                                    <Path x:Name="Up_Arrow" Data="M0,0L4,4 8,0z" Fill="Black" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                                                                                                        <Path.RenderTransform>
                                                                                                                            <TransformGroup>
                                                                                                                                <ScaleTransform ScaleY="1" ScaleX="1"/>
                                                                                                                                <SkewTransform AngleY="0" AngleX="0"/>
                                                                                                                                <RotateTransform Angle="-90"/>
                                                                                                                                <TranslateTransform X="0" Y="0"/>
                                                                                                                            </TransformGroup>
                                                                                                                        </Path.RenderTransform>
                                                                                                                    </Path>
                                                                                                                    <Path x:Name="Down_Arrow" Data="M0,4L4,0 8,4z" Fill="Black" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5" Visibility="Collapsed" VerticalAlignment="Center">
                                                                                                                        <Path.RenderTransform>
                                                                                                                            <TransformGroup>
                                                                                                                                <ScaleTransform ScaleY="1" ScaleX="1"/>
                                                                                                                                <SkewTransform AngleY="0" AngleX="0"/>
                                                                                                                                <RotateTransform Angle="135"/>
                                                                                                                                <TranslateTransform X="0" Y="0"/>
                                                                                                                            </TransformGroup>
                                                                                                                        </Path.RenderTransform>
                                                                                                                    </Path>
                                                                                                                </Grid>
                                                                                                                <ControlTemplate.Triggers>
                                                                                                                    <Trigger Property="IsChecked" Value="True">
                                                                                                                        <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible"/>
                                                                                                                        <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed"/>
                                                                                                                        <Setter Property="OpacityMask" TargetName="Down_Arrow" Value="Black"/>
                                                                                                                    </Trigger>
                                                                                                                </ControlTemplate.Triggers>
                                                                                                            </ControlTemplate>
                                                                                                        </ToggleButton.Template>
                                                                                                    </ToggleButton>
                                                                                                    <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" TextElement.FontWeight="Bold" Margin="1" RecognizesAccessKey="True"/>
                                                                                                </Grid>
                                                                                            </Border>
                                                                                            <Border x:Name="ExpandSite" Background="#FFF0F0F0" Padding="10,0,0,0" Grid.Row="1" Visibility="Collapsed">
                                                                                                <Border BorderThickness="0" HorizontalAlignment="Stretch" Margin="0" Padding="0" VerticalAlignment="Stretch">
                                                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                                                </Border>
                                                                                            </Border>
                                                                                        </Grid>
                                                                                        <ControlTemplate.Triggers>
                                                                                            <Trigger Property="IsExpanded" Value="True">
                                                                                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                                                                            </Trigger>
                                                                                        </ControlTemplate.Triggers>
                                                                                    </ControlTemplate>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </Expander.Style>
                                                                    <ItemsPresenter/>
                                                                </Expander>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </GroupStyle.ContainerStyle>
                                    </GroupStyle>
                                </xctk:PropertyItemsControl.GroupStyle>
                                <xctk:PropertyItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel IsItemsHost="True"/>
                                    </ItemsPanelTemplate>
                                </xctk:PropertyItemsControl.ItemsPanel>
                            </xctk:PropertyItemsControl>
                        </ScrollViewer>
                        <Thumb x:Name="PART_DragThumb" Cursor="SizeWE" HorizontalAlignment="Left" Margin="6,0,0,0" Width="5">
                            <Thumb.Template>
                                <ControlTemplate>
                                    <Border Background="Transparent"/>
                                </ControlTemplate>
                            </Thumb.Template>
                        </Thumb>
                    </Grid>
                    <GridSplitter HorizontalAlignment="Stretch" Height="3" Grid.Row="3">
                        <GridSplitter.Visibility>
                            <Binding Path="ShowSummary" RelativeSource="{RelativeSource TemplatedParent}">
                                <Binding.Converter>
                                    <BooleanToVisibilityConverter/>
                                </Binding.Converter>
                            </Binding>
                        </GridSplitter.Visibility>
                    </GridSplitter>
                    <StackPanel Margin="0,0,0,5" Grid.Row="4">
                        <StackPanel.Visibility>
                            <Binding Path="ShowSummary" RelativeSource="{RelativeSource TemplatedParent}">
                                <Binding.Converter>
                                    <BooleanToVisibilityConverter/>
                                </Binding.Converter>
                            </Binding>
                        </StackPanel.Visibility>
                        <TextBlock FontWeight="Bold" Padding="2,2,2,0" Text="{Binding SelectedPropertyItem.DisplayName, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <TextBlock Padding="5,2,2,0" TextWrapping="WrapWithOverflow" Text="{Binding SelectedPropertyItem.Description, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </StackPanel>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Visibility" SourceName="searchBoxContainer" Value="Collapsed"/>
                        <Condition Property="Visibility" SourceName="sortButtonContainer" Value="Collapsed"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="toolsContainer" Value="Collapsed"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="25"/>
        </Grid.RowDefinitions>
        <ribbon:Ribbon Grid.Row="0" IsDropDownOpen="True" IsSynchronizedWithCurrentItem="True" IsTextSearchCaseSensitive="True" IsTextSearchEnabled="True" ShowQuickAccessToolBarOnTop="False" UseLayoutRounding="True" WindowIconVisibility="Collapsed">
            <ribbon:Ribbon.ApplicationMenu>
                <ribbon:RibbonApplicationMenu Label="菜单" SmallImageSource="Resources/Images/Like+.ico">
                    <ribbon:RibbonApplicationMenuItem Header="菜单项1" />
                    <ribbon:RibbonApplicationMenuItem Header="菜单项2" />
                    <ribbon:RibbonApplicationMenuItem Header="菜单项3" />
                    <ribbon:RibbonApplicationMenuItem Header="菜单项4" />
                    <ribbon:RibbonApplicationMenuItem Header="菜单项5" />
                    <ribbon:RibbonApplicationMenuItem Header="菜单项6" />
                </ribbon:RibbonApplicationMenu>
            </ribbon:Ribbon.ApplicationMenu>
            <ribbon:RibbonTab Header="文件">
                <ribbon:RibbonGroup Header="常用">
                    <ribbon:RibbonButton Label="新建" LargeImageSource="Resources/Images/Like+.ico" />
                    <ribbon:RibbonButton Label="打开" SmallImageSource="Resources/Images/Like-.ico" />
                    <ribbon:RibbonButton Label="保存" SmallImageSource="Resources/Images/Like-.ico"/>
                    <ribbon:RibbonButton Label="另存为" SmallImageSource="Resources/Images/Like-.ico"/>
                </ribbon:RibbonGroup>
                <ribbon:RibbonGroup Header="示例组2">
                    <ribbon:RibbonButton Label="按钮1" SmallImageSource="Resources/Images/Like+.ico" />
                    <ribbon:RibbonButton Label="按钮2" SmallImageSource="Resources/Images/Like-.ico" />
                    <ribbon:RibbonButton Label="按钮3" />
                    <ribbon:RibbonButton Label="按钮4" />
                </ribbon:RibbonGroup>
            </ribbon:RibbonTab>
            <ribbon:RibbonTab Header="示例标签2">
                <ribbon:RibbonGroup Header="示例组">
                    <ribbon:RibbonButton Label="按钮1" SmallImageSource="Resources/Images/Like+.ico" />
                    <ribbon:RibbonButton Label="按钮2" SmallImageSource="Resources/Images/Like-.ico" />
                    <ribbon:RibbonButton Label="按钮3" />
                    <ribbon:RibbonButton Label="按钮4" />
                </ribbon:RibbonGroup>
            </ribbon:RibbonTab>
        </ribbon:Ribbon>
        <xcad:DockingManager x:Name="MainDock" Grid.Row="1">
            <xcad:LayoutRoot>
                <xcad:LayoutPanel>
                    <xcad:LayoutAnchorablePane DockWidth="150*" DockMinWidth="150">
                        <xcad:LayoutAnchorable Title="工具箱">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <ListBox AllowDrop="True" x:Name="sp_ToolBox" Background="#00000000"  PreviewMouseMove="sp_ToolBox_PreviewMouseMove" Grid.Row="1">
                                </ListBox>
                                <TextBox TextWrapping="Wrap" Text="TextBox"/>
                            </Grid>

                        </xcad:LayoutAnchorable>
                    </xcad:LayoutAnchorablePane>
                    <xcad:LayoutDocumentPane DockWidth="300*">
                        <xcad:LayoutDocument Title="设计页面">
                            <xctk:Zoombox x:Name="zb" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Visible" AnimationDuration="0" BorderBrush="#FFF73232" BorderThickness="1" ClipToBounds="False" DragOnPreview="True" KeepContentInBounds="True" ZoomOnPreview="False" ZoomOn="View">
                                <xctk:Zoombox.DragModifiers>
                                    <xctk:KeyModifier>Ctrl</xctk:KeyModifier>
                                </xctk:Zoombox.DragModifiers>
                                <Border BorderBrush="#FF464646" BorderThickness="1">
                                    <Canvas x:Name="_panel" Width="{Binding ActualWidth, ElementName=zb}" Height="{Binding ActualHeight, ElementName=zb}" AllowDrop="True" Background="#00000000" ScrollViewer.CanContentScroll="True"
										DragEnter="_panel_DragEnter" Drop="_panel_Drop" MouseLeftButtonDown="_panel_MouseLeftButtonDown" >
                                        <Canvas.Resources>
                                            <Style TargetType="{x:Type c:ModuleControl}" BasedOn="{StaticResource DesignerItemStyle}">
                                                <Setter Property="d:DragBehaviour.IsDragEnabled" Value="True" />
                                                <Setter Property="d:DragBehaviour.X" Value="{Binding X, RelativeSource={RelativeSource Self}}" />
                                                <Setter Property="d:DragBehaviour.Y" Value="{Binding Y, RelativeSource={RelativeSource Self}}" />

                                            </Style>
                                        </Canvas.Resources>
                                    </Canvas>
                                </Border>
                            </xctk:Zoombox>
                        </xcad:LayoutDocument>
                        <xcad:LayoutDocument Title="测试" />
                    </xcad:LayoutDocumentPane>
                    <xcad:LayoutAnchorablePane DockWidth="150*" DockMinWidth="150">
                        <xcad:LayoutAnchorable Title="属性栏">
                            <xctk:PropertyGrid x:Name="propertyPanel" Background="#FFE2E2E2" BorderThickness="1" BorderBrush="#FFA6A6A6" AutoGenerateProperties="False" FilterWatermark="搜索" Filter="" IsManipulationEnabled="True" OverridesDefaultStyle="False" SelectedObjectName="" ShowPreview="True" ShowDescriptionByTooltip="False" ShowAdvancedOptions="False" ShowSearchBox="True" ShowSortOptions="False" ShowSummary="True" ShowTitle="False" UseLayoutRounding="True" >
                                <xctk:PropertyGrid.PropertyDefinitions>
                                    <xctk:PropertyDefinition TargetProperties="ModuleName" Category="基础属性" Description="设置控件的名称" Name="名称" />
                                    <xctk:PropertyDefinition TargetProperties="Width" Category="基础属性" Description="" Name="名称"  />
                                    <xctk:PropertyDefinition TargetProperties="Height" />
                                    <xctk:PropertyDefinition TargetProperties="X" />
                                    <xctk:PropertyDefinition TargetProperties="Y" />
                                </xctk:PropertyGrid.PropertyDefinitions>
                            </xctk:PropertyGrid>

                            <!--<Grid Grid.Column="2" Grid.Row="1" Background="#00000000" >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="71*"/>
                                    <ColumnDefinition Width="109*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="25"/>
                                    <RowDefinition Height="25"/>
                                    <RowDefinition Height="25"/>
                                    <RowDefinition Height="25"/>
                                    <RowDefinition Height="25"/>
                                    <RowDefinition Height="25"/>
                                </Grid.RowDefinitions>
                                <TextBlock TextWrapping="Wrap" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <TextBlock Grid.Row="1" TextWrapping="Wrap" HorizontalAlignment="Center" Text="高度" VerticalAlignment="Center"/>
                                <TextBlock Grid.Row="2" TextWrapping="Wrap" HorizontalAlignment="Center" Text="宽度" VerticalAlignment="Center"/>
                                <TextBlock Grid.Row="3" TextWrapping="Wrap" HorizontalAlignment="Center" Text="X位置" VerticalAlignment="Center"/>
                                <TextBlock Grid.Row="4" TextWrapping="Wrap" HorizontalAlignment="Center" Text="Y位置" VerticalAlignment="Center"/>
                                <TextBox Grid.Column="1" Grid.Row="1" TextWrapping="Wrap" Text="{Binding CurrentModule.Height, ElementName=window}" VerticalAlignment="Center" Margin="3,0"/>
                                <TextBox Grid.Column="1" Grid.Row="2" TextWrapping="Wrap" Text="{Binding CurrentModule.Width, ElementName=window}" VerticalAlignment="Center" Margin="3,0"/>
                                <TextBox Grid.Column="1" Grid.Row="3" TextWrapping="Wrap" Text="{Binding CurrentModule.(Canvas.Left), ElementName=window}" VerticalAlignment="Center" Margin="3,0"/>
                                <TextBox Grid.Column="1" Grid.Row="4" TextWrapping="Wrap" Text="{Binding CurrentModule.(Canvas.Top), ElementName=window}" VerticalAlignment="Center" Margin="3,0"/>
                            </Grid>-->
                        </xcad:LayoutAnchorable>
                    </xcad:LayoutAnchorablePane>
                </xcad:LayoutPanel>
            </xcad:LayoutRoot>
        </xcad:DockingManager>
        <StatusBar Background="White" Grid.Row="3">
            <TextBlock Text="消息提示"/>
        </StatusBar>



    </Grid>

</Window>
